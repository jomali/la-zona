

!!==============================================================================
!!
!!	LA ZONA
!!	Definición de localidades y objetos
!!
!!==============================================================================
!!
!!	Archivo:		laZona_objects.inf
!!	Autor(es):		J. Francisco Martín <jfm.lisaso@gmail.com>
!!	Idioma:			ES (Castellano)
!!	Sistema:		Inform-INFSP 6
!!	Plataforma:		GLULX
!!	Versión:		0.0
!!	Fecha:			2017/12/16
!!
!!------------------------------------------------------------------------------
!!
!!	Este archivo forma parte del relato interactivo LA ZONA.
!!
!!	LA ZONA es software libre: usted puede redistribuirlo y/o
!!	modificarlo bajo los términos de la Licencia Pública General GNU
!!	publicada por la Fundación para el Software Libre, ya sea la versión
!!	3 de la Licencia, o (a su elección) cualquier versión posterior.
!!
!!	LA ZONA se distribuye con la esperanza de que sea útil, pero
!!	SIN GARANTÍA ALGUNA; ni siquiera la garantía implícita MERCANTIL o
!!	de APTITUD PARA UN PROPÓSITO DETERMINADO. Consulte los detalles de
!!	la Licencia Pública General GNU para más información.
!!
!!	Debería haber recibido una copia de la Licencia Pública General GNU
!!	junto a LA ZONA. En caso contrario, consulte
!!	<http://www.gnu.org/licenses/>.
!!
!!	Copyright (c) 2018, J. Francisco Martín
!!
!!------------------------------------------------------------------------------
!!
!!	# HISTORIAL DE VERSIONES
!!
!!	0.0: 2016/06/18	Inicio del desarrollo.
!!
!!------------------------------------------------------------------------------
!!
!!	# TABLA DE CONTENIDOS
!!
!!	1)	LIMBO
!!	2)	TUNEL
!!	3)	CANAL
!!	4)	CALLEJON
!!	5)	AZOTEA
!!	6)	CALLE_OESTE
!!	7)	CALLE_ESTE
!!	8)	INFIERNO_NEGRO
!!	9)	INFIERNO_BLANCO
!!
!!------------------------------------------------------------------------------


!!==============================================================================
!!
!!	1)	LIMBO
!!
!!------------------------------------------------------------------------------

Object	DungeonMaster "(Dungeon Master)"
 with	!!----------------------------------------------------------------------
		!! Reinicia el bucle del relato, colocando al usuario de nuevo en la
 		!! localidad inicial.
		!!
		!!	@returns {boolean} Verdadero
		!!----------------------------------------------------------------------
		restart_loop [
			obj inflection;
			!! Reinicializaciones del relato:
			objectloop(obj ofclass Thing) {
				give obj ~described;
				obj.reset();
			}
			objectloop(obj ofclass Room) {
				give obj ~visited;
			}
			if (self.iteration <= self.iteration_threshold) self.iteration++;
			self.shot_on_dartboard = false;
			PlayerTo(self.initial_location);
			return true;
		],
		!!----------------------------------------------------------------------
		!! Inicio del bucle.
		!!
		!!	@returns {boolean} Verdadero
		!!----------------------------------------------------------------------
		start_loop [;
			EraseWindow();
			FadeInTrack(MUS_PURGATORIO, -1);
			new_line;
			HorizontalRule();
			new_line;
			return true;
		],
		!!----------------------------------------------------------------------
		!! Imprime un mensaje acerca del viento con una probabilidad de
		!! '1/wind_ratio'. Si se utiliza con el parámetro 'stop' fuerza que la
		!! rutina no imprima ningún mensaje ni esta vez ni la próxima vez que
		!! sea invocada (invocaciones posteriores volverán a funcionar
		!! normalmente hasta que se vuelva a utilizar el parámetro 'stop').
		!!
		!!	@param {boolean} [stop=false] - Si se invoca con 'stop' verdadero
		!!		se fuerza que no se impriman mensajes ni esta vez ni la próxima
		!!		vez que la rutina sea invocada
		!!	@returns {boolean} Verdadero
		!!----------------------------------------------------------------------
		wind_blows [ stop;
			if (stop) {
				self.wind_stopped = true;
				return true;
			}
			if (self.wind_stopped) {
				self.wind_stopped = false;
				return true;
			}
			if (random(self.wind_ratio) == 1) {
				new_line;
				switch (random(4)) {
					1: O__M(limbo_suelo, 3);
					2: O__M(limbo_suelo, 4);
					3: O__M(limbo_suelo, 5);
					default: O__M(limbo_suelo, 6);
				}
			}
			return true;
		],
		!!----------------------------------------------------------------------
		!! Otras propiedades
		!!----------------------------------------------------------------------
		!! El Stalker ha muerto de un ataque al corazón en la iteración
		!! anterior del bucle/si va a morir de un ataque al corazón en la
		!! iteración actual:
		heart_attack true,
		!! Contador de iteraciones del bucle (sólo registra las primeras):
		iteration 0,
		!! Número de iteraciones a partir de las que el narrador cambia
		!! aleatoriamente de formas temporales:
		iteration_threshold 4,
		!! El Stalker ha disparado sobre la diana en la iteración actual:
		shot_on_dartboard false,
		!! El Stalker ha descubierto la máquina de tabaco del callejón:
		waste_described false,
		!! La función 'wind_blows' sólo imprime mensajes en una probabilidad
		!! de 1/wind_ratio:
		wind_ratio 5,
 private
		!! Localidad inicial del bucle:
		initial_location TUNEL,
		!! El viento está detenido durante la siguiente invocación de la rutina
		!! 'wind_blows()':
		wind_stopped false,
;

Room	LIMBO "En algún lugar"
 with	name_f	'babia',
		name_m	'limbo' 'lugar' 'sueno' 'vacio',
		gender	G_MASCULINO,
		description [;
			O__M(self, 1);
			if (self hasnt visited) O__M(self, 2);
			new_line;
			return true;
		],
		clarification 0,
		images	PIC_INFIERNO_A PIC_INFIERNO_B,
 has	male;

NPC		-> Stalker "Stalker"
 with	name_m	'personaje' 'protagonista' 'stalker',
		gender	G_MASCULINO,
		adjectives 'principal',
		description [; <<Inv>>; ],
 has	male proper;

!!	 -	'general' se activa después de haber limpiado el arma por primera vez.
!!		Después ya no se desactiva.
Item	limbo_fusil "fusil" Stalker
 with	name_f	'arma' 'culata',
		name_m	'canon' 'fusil' 'gatillo' 'rifle',
		gender	G_MASCULINO,
		adjectives 'madera' 'manchada' 'manchado' 'tiza',
		description [;
			if (self has general) return O__M(self, 2);
			else return O__M(self, 1);
		],
		before [;
			Rub:
				if (self has general) return O__M(self, 5);
				give self general;
				return O__M(self, 4);
			Touch:
				return O__M(self, 3);
		],
		!! action_set ##Examine ##Take ##Drop,
 has	male remarkable;

Atrezzo	limbo_cielo "cielo"
 with	found_in [; if (location ofclass Outdoors) return true; ],
		name_f	'nube',
		name_fp	'nubes',
		name_m	'cielo' 'dia' 'firmamento' 'sol',
		gender	G_MASCULINO,
		adjectives 'cerrado' 'encapotado' 'plomizo',
		description [; return O__M(self, 1); ],
		react_before [;
			DefaultAction, Examine, Search:
				if (noun == u_obj) {
					<<Examine self>>;
				}
		],
 has	male;

Atrezzo	limbo_suelo "suelo"
 with	found_in [; if (location ofclass Outdoors) return true; ],
		name_f	'ceniza',
		name_fp	'cenizas',
		name_m	'piso' 'polvo' 'suelo',
		gender	G_MASCULINO,
		description [;
			if (location == CALLE_OESTE) return O__M(self, 1);
			else return O__M(self, 2);
		],
		react_before [;
			DefaultAction, Examine, Search:
				if (noun == d_obj) {
					<<Examine self>>;
				}
		],
		each_turn [;
			if (location == CALLE_ESTE or CALLE_OESTE)
				DungeonMaster.wind_blows();
		],
 has	male;


!!==============================================================================
!!
!!	2)	TUNEL
!!
!!------------------------------------------------------------------------------

Indoors	TUNEL "Interior del túnel"
 with	name_f	'alcantarilla' 'cloaca' 'galeria',
		name_fp	'alcantarillas' 'cloacas',
		name_m	'corredor' 'pasadizo' 'pasaje' 'tunel',
		gender	G_MASCULINO,
		adjectives
			'dentro' 'interior' 'negra' 'negro' 'oscura' 'oscuro' 'subterranea'
			'subterraneo',
		initial [; if (self hasnt visited) {
			!! Primera parte del mensaje inicial:
			if (DungeonMaster.heart_attack) O__M(self, 3);
			else O__M(self, 5);
			!! Inicializaciones de cada iteración del bucle:
			if (DungeonMaster.iteration == 0) {
				FadeInTrack(SFX_GOTAS, 100);
			}
			if (DungeonMaster.iteration > 0) {
				PressAnyKey();
				FadeOutTrack(SFX_VIENTO, 0, 1500, SFX_GOTAS);
			}
			if (DungeonMaster.iteration == DungeonMaster.iteration_threshold) {
				SetGrammaticalInflection(THIRD_PERSON_PRESENT);
			}
			if (DungeonMaster.iteration > DungeonMaster.iteration_threshold) {
				SetGrammaticalInflection(random(
					THIRD_PERSON_PRESENT,
					THIRD_PERSON_PAST,
					THIRD_PERSON_FUTURE));
			}
			!! Segunda parte del mensaje inicial:
			new_line;
			if (DungeonMaster.heart_attack) O__M(self, 4);
			else O__M(self, 6);
			new_line;
			return true;
		}],
		description [; return O__M(self, 1); ],
		before [;
			Listen:
				if (DungeonMaster.heart_attack) return O__M(self, 9);
				if (~~self.listened) {
					self.listened = true;
					return O__M(self, 10);
				}
				return O__M(self, 11);
		],
		f_to	tunel_salida,
		b_to	[; return O__M(self, 8); ],
		out_to	[; return self.f_to(); ],
		cant_go	[; return O__M(self, 7); ],
		exits	[st;
			st = PrintParserPrefix();
			O__M(self, 12);
			PrintParserSufix(st);
			new_line;
			return true;
		],
		images	PIC_TUNEL_A,
 private
		listened false,
 has	male;

!!	 -	'on' activa las comprobaciones de la rutina 'react_before' del objeto
Atrezzo	-> tunel_oscuridad "oscuridad"
 with	name_f	'negrura' 'oscuridad' 'penumbra' 'sombra' 'tiniebla',
		name_fp	'penumbras' 'sombras' 'tinieblas',
		gender	G_FEMENINO,
		article "la",
		adjectives
			'absoluta' 'absolutas' 'densa' 'densas' 'espesa' 'espesas'
			'impenetrable' 'impenetrables' 'inescrutabe' 'inescrutables'
			'insondable' 'insondables',
		description [;	return O__M(self, random(4)); ],
		react_before [;
			if (self hasnt on) return false;
			Consult, Examine, Look, LookUnder, Read, Search:
				if (noun == nothing) return false;
				if (noun == self) return false;
				if (noun == parent(self)) return false;
				if (noun == tunel_muro) return false;
				if (noun == tunel_salida) return false;
				<<Examine self>>;
			DefaultAction: return false;
			Drop:
				if (noun == nothing) return false;
				if (~~IndirectlyContains(player, noun)) return false;
				return O__M(self, 5, noun);
			Inv, InvTall, InvWide:
				<<Examine self>>;
			Rub:
				if (noun == nothing) return false;
				if (noun == self) return false;
				if (noun == parent(self)) return false;
				if (noun == tunel_muro) return false;
				if (noun == tunel_salida) return false;
				return O__M(self, 6, noun);
		],
 has	female on;

Atrezzo	-> tunel_muro "muro"
 with	name_f	'pared' 'tapia',
		name_fp	'paredes' 'tapias',
		name_m	'muro',
		name_mp	'muros',
		gender	G_MASCULINO,
		adjectives 'humeda' 'humedas' 'humedo' 'humedos' 'ladrillo',
		before [;
			Examine, Touch: return O__M(self, 1);
		],
 has	male;

Furniture	-> tunel_salida "salida"
 with	name_f	'abertura' 'boca' 'claridad' 'entrada' 'luminosidad' 'luz'
 				'salida',
		name_m	'final' 'resplandor' 'semicirculo',
		gender	G_FEMENINO,
		adjectives 'luminosa' 'luminoso' 'tunel',
		describe [; return true; ],
		description [; return O__M(self, 1); ],
		before [;
			DefaultAction:
				return false;
			Enter, Examine, Go, Search:
				return false;
			default:
				return O__M(self, 2);
		],
		door_dir f_to,
		door_to CANAL,
 has	door female open remarkable;


!!==============================================================================
!!
!!	3)	CANAL
!!
!!------------------------------------------------------------------------------

Outdoors	CANAL "canal"
 with	name_f	'acequia',
		name_m	'acueducto' 'canal',
		gender	G_MASCULINO,
		initial [; if (self hasnt visited) {
			if (DungeonMaster.heart_attack) O__M(self, 2);
			else O__M(self, 3);
			O__M(self, 4);
			new_line;
			return true;
		}],
		description [; return O__M(self, 1); ],
		s_to	canal_tunel,
		e_to	[;
			if (canal_edificios hasnt described) {
				<Examine canal_edificios>;
				return O__M(self, 7);
			}
			return O__M(self, 8);
		],
		w_to	[; return self.e_to(); ],
		u_to	canal_escalera,
		in_to	[; return self.s_to(); ],
		out_to	[; return self.u_to(); ],
		f_to	[; return self.u_to(); ],
		b_to	[; return self.s_to(); ],
		cant_go	[; return O__M(self, 5); ],
		exits	[st;
			st = PrintParserPrefix();
			O__M(self, 9);
			PrintParserSufix(st);
			new_line;
			return true;
		],
		images	PIC_CANAL_A PIC_CANAL_B,
 has	male;

Atrezzo	-> canal_edificios "edificios"
 with	name_f	'ciudad' 'ruina' 'urbe',
		name_fp	'ruinas',
		name_m	'edificio' 'metropoli',
		name_mp	'edificios',
		gender	G_MASCULINO + G_PLURAL,
		adjectives 'destrozada' 'destrozado' 'ruinosa' 'ruinoso' 'ruinosos',
		description [;
			if (self hasnt described) O__M(self, 1);
			return O__M(self, 2);
		],
 has	male pluralname;

Atrezzo	-> canal_rio "río"
 with	name_f	'corriente',
		name_fp	'aguas',
		name_m	'agua' 'cauce' 'caudal' 'rio',
		gender	G_MASCULINO,
		adjectives 'turbia' 'turbias' 'turbio',
		description [; return O__M(self, 1); ],
 has	male;

Atrezzo	-> canal_tunel "entrada del túnel"
 with	name_f	'abertura' 'alcantarilla' 'cloaca' 'entrada' 'salida',
		name_fp	'alcantarillas' 'cloacas',
		name_m	'corredor' 'pasadizo' 'pasaje' 'tunel',
		gender	G_FEMENINO,
		adjectives 'boca',
		description [; return O__M(self, 1); ],
		door_dir s_to,
		door_to [; return O__M(self, 2); ],
 has	door female open;

Furniture	-> canal_escalera "escalera"
 with	name_f	'cuesta' 'escalera' 'escalerilla' 'escalinata' 'pendiente',
		name_fp	'escaleras' 'escalerillas',
		name_m	'escalon' 'peldano' 'terraplen',
		name_mp	'escalones' 'peldanos',
		gender	G_FEMENINO,
		describe [;
			new_line;
			return O__M(self, 2);
		],
		description [; return O__M(self, 1); ],
		before [;
			DefaultAction:
				return false;
			Enter, Examine, Go, Search:
				return false;
			default:
				return O__M(self, 3);
		],
		door_dir u_to,
		door_to CALLEJON,
 has	door female open pluralname remarkable;


!!==============================================================================
!!
!!	4)	CALLEJON
!!
!!------------------------------------------------------------------------------

Outdoors	CALLEJON "callejón"
 with	name_f	'calleja' 'callejuela',
		name_m	'callejon' 'callizo' 'pasadizo',
		gender	G_MASCULINO,
		initial [;
			if (self hasnt visited) O__M(self, 2);
			else O__M(self, 3);
			new_line;
			return true;
		],
		description [; return O__M(self, 1); ],
		n_to	CANAL,
		e_to	callejon_puerta,
		s_to	CALLE_OESTE,
		f_to	[; return self.s_to(); ],
		b_to	[; return self.n_to(); ],
		cant_go	[; return O__M(self, 4); ],
		exits	[st;
			st = PrintParserPrefix();
			O__M(self, 5);
			PrintParserSufix(st);
			new_line;
			return true;
		],
		images	PIC_CALLEJON_A PIC_CALLEJON_B,
 has	male;

Furniture	-> callejon_puerta "puerta"
 with	name_f	'abertura' 'cerradura' 'entrada' 'puerta',
		name_m	'umbral',
		gender	G_FEMENINO,
		describe [;
			new_line;
			if (~~DungeonMaster.waste_described) return O__M(self, 2);
			return O__M(self, 3);
		],
		description [; return O__M(self, 1); ],
		door_dir e_to,
		door_to AZOTEA,
 has	door female open remarkable;

Atrezzo	-> callejon_edificios "edificios"
 with	name_f	'pared',
		name_fp	'paredes',
		name_m	'edificio' 'muro',
		name_mp	'edificios' 'muros',
		gender	G_MASCULINO,
		description [; return O__M(self, 1); ],
 has	male pluralname;

Atrezzo	-> callejon_basura "montones de desperdicios"
 with	name_f	'basura',
		name_fp	'basuras',
		name_m	'carton' 'desperdicio' 'escombro' 'mueble',
		name_mp	'cartones' 'desperdicios' 'escombros' 'muebles',
		gender	G_MASCULINO + G_PLURAL,
		description [;
			O__M(self, 1);
			if (DungeonMaster.waste_described) return O__M(self, 2);
			else {
				DungeonMaster.waste_described = true;
				new_line;
				new_line;
				return O__M(self, 3);
			}
		],
 has	male pluralname;

Furniture	-> callejon_maquina_tabaco "máquina de tabaco"
 with	name_f	'maquina',
		name_m	'mueble' 'tabaco',
		name_mp	'muebes',
		gender	G_FEMENINO,
		description [; return O__M(self, 1); ],
 has	concealed female ~open;

Item	limbo_moneda "moneda de plata" LIMBO
 with	name_f	'moneda',
		gender	G_FEMENINO,
		adjectives 'plata',
		description [; return O__M(self, 1); ],
 has	female remarkable;


!!==============================================================================
!!
!!	5)	AZOTEA
!!
!!------------------------------------------------------------------------------

Outdoors	AZOTEA "azotea de edificio"
 with	name_f	'azotea' 'terraza',
		gender	G_FEMENINO,
		initial [;
			if (self hasnt visited) O__M(self, 2);
			else O__M(self, 3);
			new_line;
			return true;
		],
		description [; return O__M(self, 1); ],
		d_to	CALLEJON,
		b_to	[; return self.d_to(); ],
		cant_go	[; return O__M(self, 4); ],
		exits	[st;
			st = PrintParserPrefix();
			O__M(self, 5);
			PrintParserSufix(st);
			new_line;
			return true;
		],
		images	PIC_AZOTEA_A PIC_AZOTEA_B,
 has	female;

Atrezzo	-> azotea_ciudad "ciudad"
 with	name_f	'calle' 'ciudad' 'urbe' 'vista',
		name_fp	'calles' 'vistas',
		name_m	'edificio',
		name_mp	'edificios',
		gender	G_FEMENINO,
		description [; return O__M(self, 1); ],
 has	female;

Atrezzo	-> azotea_colillas "colillas"
 with	name_f	'colilla',
		name_fp	'colillas',
		name_m	'cigarrillo' 'cigarro' 'tabaco',
		name_mp	'cigarrillos' 'cigarros',
		gender	G_FEMENINO + G_PLURAL,
		adjectives 'consumida' 'consumidas' 'consumido' 'consumidos',
		description [; return O__M(self, 1); ],
 has	female pluralname;

Furniture	-> azotea_puerta "puerta"
 with	name_f	'puerta',
		gender	G_FEMENINO,
		description [; return O__M(self, 1); ],
 has	female remarkable;

Item	-> azotea_silla "silla"
 with	name_f	'silla',
		name_m	'asiento' 'mueble',
		gender	G_FEMENINO,
		adjectives
			'madera' 'sencilla' 'sencillo',
		description [; return O__M(self, 1); ],
 has	female;

Atrezzo	azotea_soldado "soldado" LIMBO
 with	name_f	'persona',
		name_m	'enemigo' 'hombre' 'soldado',
		gender	G_MASCULINO,
		description [; return O__M(self, 1); ],
 has	male remarkable;

Atrezzo	azotea_cadaver "soldado" LIMBO
 with	name_f	'persona',
		name_m	'cadaver' 'cuerpo' 'enemigo' 'hombre' 'soldado',
		gender	G_MASCULINO,
		description [; return O__M(self, 1); ],
 has	male;


!!==============================================================================
!!
!!	6)	CALLE_OESTE
!!
!!------------------------------------------------------------------------------

Outdoors	CALLE_OESTE "calle"
 with	name_f	'calle',
		gender	G_FEMENINO,
		adjectives 'principal',
		initial [;
			!! Es importante tener en cuenta que puede estar produciéndose un
			!! efecto de 'fade' en tiempo real antes de lanzar el sistema de
			!! apuntado y disparo, para evitar que entren en conflicto. Para
			!! ello, se pueden utilizar las rutinas: Damusix.EnFade() y
			!! Damusix.AbortarFade())
			FadeInTrack(SFX_VIENTO, 100, 1500);
			if (self hasnt visited) {
				O__M(self, 2);
				new_line;
				return true;
			}
		],
		description [; return O__M(self, 1); ],
		n_to	CALLEJON,
		e_to	CALLE_ESTE,
		w_to	calle_edificio_desplomado,
		f_to	[; return self.e_to(); ],
		b_to	[; return self.n_to(); ],
		cant_go [; return O__M(self, 4); ],
		exits	[st;
			st = PrintParserPrefix();
			O__M(self, 5);
			PrintParserSufix(st);
			new_line;
			return true;
		],
		images PIC_CALLE_OESTE_A PIC_CALLE_OESTE_B,
 has	female;

Atrezzo	-> calle_coches "coches"
 with	name_m	'amasijo' 'coche' 'vehiculo',
		name_mp	'amasijos' 'coches' 'vahiculos',
		gender	G_MASCULINO + G_PLURAL,
		adjectives 'calcinado' 'calcinados' 'metal',
		description [; return O__M(self, 1); ],
 has	male pluralname;

Atrezzo	-> calle_edificio_desplomado "edificio desplomado"
 with	name_f	'barricada',
		name_m	'edificio',
		gender	G_MASCULINO,
		adjectives 'caido' 'derrumbado' 'desplomado',
		description [; return O__M(self, 1); ],
		door_dir w_to,
		door_to [; <<Examine self>>; ],
 has	door male open;

Furniture	-> calle_diana "diana"
 with	name_f	'diana',
		name_m	'blanco',
		gender	G_FEMENINO,
		adjectives 'tiza',
		describe [;
			new_line;
			return O__M(self, 4);
		],
		description [ i;
			if (self.attemps < 5) return O__M(self, 1);
			i = (self.hits*100)/self.attemps;
			if (i < self.minimum_threshold) return O__M(self, 2);
			if (i > self.maximum_threshold) return O__M(self, 3);
			return O__M(self, 1);
		],
		before [ i;
			ShootAt:
				O__M(self, 5);
				new_line;
				self.attemps++;
				i = AimAndFire();
				if (i == -2) {
					! TODO Máquina-Z
				} else if (i <= AimingManager.get_is_distance()) {
					self.hits++;
					return O__M(self, 8);
				}
				return O__M(self, 6);
		],
		restart [;
			self.hits = 0;
			self.attemps = 0;
		],
 private
		attemps 0,				! número de intentos
		hits 0,					! número de aciertos a la diana
		maximum_threshold 66,	! umbral superior
		minimum_threshold 33,	! umbral inferior
 has	female;


!!==============================================================================
!!
!!	7)	CALLE_ESTE
!!
!!------------------------------------------------------------------------------

Outdoors	CALLE_ESTE "calle"
 with	name_f	'calle',
		gender	G_FEMENINO,
		adjectives 'principal',
		initial [; if (self hasnt visited) {
			! TODO
			DungeonMaster.wind_blows(true); ! Detiene el viento este turno
			move limbo_cadaver to self;
			O__M(self, 2);
			if (DungeonMaster.shot_on_dartboard) O__M(self, 3);
			O__M(self, 4);
			new_line;
			return true;
		}],
		description [; return O__M(self, 1); ],
		w_to	CALLE_OESTE,
		b_to	[; return self.w_to(); ],
		cant_go	[; return O__M(self, 5); ],
		exits	[st;
			st = PrintParserPrefix();
			O__M(self, 6);
			PrintParserSufix(st);
			new_line;
			return true;
		],
		images	PIC_CALLE_ESTE_A,
 has	female;

Furniture	limbo_cadaver "cadáver" LIMBO
 with	name_f	'persona',
		name_m	'cadaver' 'camarada' 'cuerpo' 'muerto' 'soldado',
		gender	G_MASCULINO,
		describe [;
			if (DungeonMaster.heart_attack) {
				new_line;
				if (self has described) return O__M(self, 7);
				if (self.discovered) return O__M(self, 6);
				self.discovered = true;
				return O__M(self, 5);
			} else {
				new_line;
				if (self has described) return O__M(self, 10);
				if (self.discovered) return O__M(self, 9);
				self.discovered = true;
				return O__M(self, 8);
			}
		],
		description [;
			if (DungeonMaster.heart_attack) {
				if (self hasnt described) return O__M(self, 1);
				give self on;
				return O__M(self, 2);
			} else {
				if (self hasnt described) return O__M(self, 3);
				give self on;
				return O__M(self, 4);
			}
		],
		react_before [;
			if (self hasnt on) return false;
			Search:
				if (~~self.registered) return false;
				return DungeonMaster.restart_loop();
			default:
				return DungeonMaster.restart_loop();
		],
		before [;
			Search:
				if (self hasnt on) return O__M(self, 11);
				else {
					self.registered = true;
					!! TODO - Comprobar núm monedas
					return O__M(self, 12);
				}
		],
		reset [;
			give self ~on;
			self.discovered = false,
			self.registered = false;
		],
 private
		discovered false,
		registered false,
 has	male remarkable transparent;

Atrezzo	-> -> limbo_cadaver_sangre "cadáver"
 with	name_f	'sangre',
		gender	G_FEMENINO,
		description [;
			if (DungeonMaster.heart_attack) <<Examine limbo_cadaver>>;
			else return O__M(self, 1);
		],
 has	female;
