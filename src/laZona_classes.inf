

!!==============================================================================
!!
!!	LA ZONA
!!	Definición de atributos y clases
!!
!!==============================================================================
!!
!!	Archivo:		laZona_classes.inf
!!	Autor(es):		J. Francisco Martín <jfm.lisaso@gmail.com>
!!	Idioma:			ES (Castellano)
!!	Sistema:		Inform-INFSP 6
!!	Plataforma:		Máquina-Z/Glulx
!!	Versión:		1.0
!!	Fecha:			2018/08/25
!!
!!------------------------------------------------------------------------------
!!
!!	Este archivo forma parte de la ficción interactiva LA ZONA.
!!
!!	LA ZONA es software libre: usted puede redistribuirlo y/o
!!	modificarlo bajo los términos de la Licencia Pública General GNU
!!	publicada por la Fundación para el Software Libre, ya sea la versión
!!	3 de la Licencia, o (a su elección) cualquier versión posterior.
!!
!!	LA ZONA se distribuye con la esperanza de que sea útil, pero
!!	SIN GARANTÍA ALGUNA; ni siquiera la garantía implícita MERCANTIL o
!!	de APTITUD PARA UN PROPÓSITO DETERMINADO. Consulte los detalles de
!!	la Licencia Pública General GNU para más información.
!!
!!	Debería haber recibido una copia de la Licencia Pública General GNU
!!	junto a LA ZONA. En caso contrario, consulte
!!	<http://www.gnu.org/licenses/>.
!!
!!	Copyright (c) 2018, J. Francisco Martín
!!
!!------------------------------------------------------------------------------
!!
!!	TABLA DE CONTENIDOS
!!
!!	-	Room
!!		+	Outdoors
!!		+	Indoors
!!	-	Thing
!!		+	AdjacentRoom
!!		+	Atrezzo
!!		+	Item
!!			*	Clothes
!!		+	NPC
!!
!!------------------------------------------------------------------------------
!!
!!	NOTA SOBRE LAS PROPIEDADES DE CLASE
!!
!!	Hay rutinas como 'before' o 'react_before' que son propiedades no aditivas,
!!	es decir, si se crea una clase que defina un comportamiento específico para
!!	una de estas propiedades, y a continuación se crea un objeto como instancia
!!	de esta clase de forma que también él defina su propia versión de alguna de
!!	estas propiedades no aditivas, las rutinas del objeto "sobreescribirán"
!!	completamente aquellas de la clase. Dicho de otra manera, si el objeto
!!	define las suyas propias, las rutinas 'before' y 'react_before' de la clase
!!	de la que es instancia NO SERÁN INVOCADAS en ningún momento. Sin embargo,
!!	se puede hacer una llamada explícita a la rutina de la clase desde la
!!	rutina del objeto. A continuación se especifica cómo un objeto 'objectName'
!!	invocaría a la rutina 'react_before' de una superclase 'className' de su
!!	jerarquía de clases:
!!
!!		objectName.className::react_before();
!!
!!------------------------------------------------------------------------------


!!==============================================================================
!!	-	Room
!!------------------------------------------------------------------------------
!!	Representa un objeto localidad dentro del modelo de mundo.
!!------------------------------------------------------------------------------

Class	Room
 with	description [;
			if (action == ##Look || self hasnt visited) {
				self.long_description();
			} else self.short_description();
			!! Espacio para elementos comunes a las dos descripciones.
			return true;
		],
		long_description "EN CONSTRUCCIÓN.",
		!! Por defecto, la descripción corta es la misma descripción larga:
		short_description [; return self.long_description(); ],
		before [;
			Examine:
				if (noun == self) <<Look>>;
		],
		!! Permite que se inhiba el listado automático de objetos al imprimir
		!! la descripción de la localidad. (XXX Para ello se debe modificar el
		!! comportamiento de la acción ##Look en el archivo de mensajes de la
		!! librería):
		inhibit_object_list false,
		state 0,
 has	light;

!!==============================================================================
!!	+	Indoors
!!------------------------------------------------------------------------------

Class	Indoors
 class	Room
;

!!==============================================================================
!!	+	Outdoors
!!------------------------------------------------------------------------------

Class	Outdoors
 class	Room
;

!!==============================================================================
!!	-	Thing
!!------------------------------------------------------------------------------
!!	Representa un objeto dentro del modelo del mundo, con un tamaño, volumen y
!!	peso específicos, así como diferentes valores de capacidad asociados a su
!!	potencial como contenedor para otros objetos. Está ideada como una clase
!!	abstracta sobre la que definir el resto de subclases más concretas de
!!	objetos con los que modelar el mundo del relato.
!!------------------------------------------------------------------------------

Class	Thing
 with	action_set 0,
		capacity_size	-1,	! Capacidad total: en cuanto a tamaño
		capacity_volume	-1,	! Capacidad total: en cuanto a volumen
		capacity_weight	-1,	! Capacidad total: en cuanto a peso
		size	0,			! Tamaño
		volume	0,			! Volumen
		weight	0,			! Peso
		description [;
			switch (_grammatical_inflection) {
				FIRST_PERSON_PRESENT:
					if (IsPluralNoun(player)) print "No vemos";
					else print "No veo";
				SECOND_PERSON_PRESENT:
					if (IsPluralNoun(player)) print "No veis";
					else print "No ves";
				THIRD_PERSON_PRESENT:
					if (IsPluralNoun(player)) print "No ven";
					else print "No ve";
				FIRST_PERSON_PAST:
					if (IsPluralNoun(player)) print "No vimos";
					else print "No vi";
				SECOND_PERSON_PAST:
					if (IsPluralNoun(player)) print "No visteis";
					else print "No viste";
				THIRD_PERSON_PAST:
					if (IsPluralNoun(player)) print "No vieron";
					else print "No vio";
				FIRST_PERSON_FUTURE:
					if (IsPluralNoun(player)) print "No veremos";
					else print "No veré";
				SECOND_PERSON_FUTURE:
					if (IsPluralNoun(player)) print "No veréis";
					else print "No verás";
				THIRD_PERSON_FUTURE:
					if (IsPluralNoun(player)) print "No verán";
					else print "No verá";
			}
			" nada especial en ", (the) self, ".";
		],
		state 0,
;

!!==============================================================================
!!	+	AdjacentRoom
!!------------------------------------------------------------------------------
!!	Representa un objeto dentro del modelo de mundo, hacia la que el usuario se
!!	puede desplazar.
!!------------------------------------------------------------------------------

Class	AdjacentRoom
 class	Thing
 with	short_name [
			obj;
			if (self.direction_obj ~= 0 && self.compass_reference) {
				if (metaclass(self.direction_obj) == Routine) {
					obj = self.direction_obj();
				}
				if (metaclass(self.direction_obj) == Object) {
					obj = self.direction_obj;
				}
				print (object) self, " ", (al) obj;
				return true;
			}
		],
		description [;
			return L__M(##Look, 7, self);
		],
		before [
			previous_style obj;
			DefaultAction,
			Use:
				previous_style = UseTextStyle(TEXT_STYLE_PARSER);
				print (string) TEXT_STYLE_PARSER_PREFIX;
				print "ve ", (al_) self, "", (object) self;
				print (string) TEXT_STYLE_PARSER_SUFIX;
				UseTextStyle(previous_style);
				new_line;
				<<Enter self>>;
			Enter,
			Go:
				if (self.direction_obj ~= 0) {
					if (metaclass(self.direction_obj) == Routine) {
						obj = self.direction_obj();
					}
					if (metaclass(self.direction_obj) == Object) {
						obj = self.direction_obj;
					}
					<<Go obj>>;
				}
		],
		compass_reference false,
		direction_obj 0,
 has	open scenery;

!!==============================================================================
!!	+	Atrezzo.
!!------------------------------------------------------------------------------
!!	Representa un objeto decorado dentro del modelo de mundo. Se aplica la
!!	restricción 'scenery' definida por la librería Inform.
!!------------------------------------------------------------------------------

Class	Atrezzo
 class	Thing
 with	before [;
			DefaultAction,
			Examine,
			Search:
				return false;
			default:
				switch (_grammatical_inflection) {
					FIRST_PERSON_PRESENT:
						if (IsPluralNoun(player))
							print "No creemos que necesitemos preocuparnos";
						else print "No creo que necesite preocuparme";
					SECOND_PERSON_PRESENT:
						print "No es necesario que ";
						if (IsPluralNoun(player)) print "os preocupéis";
						else print "te preocupes";
					THIRD_PERSON_PRESENT:
						print "No es necesario que ";
						if (IsPluralNoun(player)) print "se preocupen";
						else print "se preocupe";
					FIRST_PERSON_PAST:
						if (IsPluralNoun(player))
							print "No creíamos que necesitásemos preocuparnos";
						else print "No creía que necesitase preocuparme";
					SECOND_PERSON_PAST:
						print "No era necesario que ";
						if (IsPluralNoun(player)) print "os preocupaseis";
						else print "te preocupases";
					THIRD_PERSON_PAST:
						print "No era necesario que ";
						if (IsPluralNoun(player)) print "se preocupasen";
						else print "se preocupase";
					FIRST_PERSON_FUTURE:
						print "Es difícil que";
						if (IsPluralNoun(player))
							print "vayamos a necesitar preocuparnos";
						else print "vaya a necesitar preocuparme";
					SECOND_PERSON_FUTURE:
						print "No será necesario que ";
						if (IsPluralNoun(player)) print "os preocupéis";
						else print "te preocupes";
					THIRD_PERSON_FUTURE:
						print "No será necesario que ";
						if (IsPluralNoun(player)) print "se preocupen";
						else print "se preocupe";
				}
				print " por ";
				SpanishNominativePronoun(self);
				".";
		],
 has	scenery;

!!==============================================================================
!!	+	Item
!!------------------------------------------------------------------------------
!!	Representa un objeto simple dentro del modelo de mundo sobre el que
!!	inicialmente no se aplican restricciones de ningún tipo.
!!------------------------------------------------------------------------------

Class	Item
 class	Thing
;

!!==============================================================================
!!	*	Clothes
!!------------------------------------------------------------------------------
!!	Para objetos vestibles. Implementa un mecanismo de capas, de modo que no es
!!	posible vestir ni desvistir prendas de una capa mientras haya puestas
!!	prendas de una capa superior.
!!------------------------------------------------------------------------------

Class	Clothes
 class	Item
 with	before [
			obj i temp layer_a layer_b;
			Disrobe,
			Wear:
				!! Calcula la capa de referencia del objeto:
				for (i = 0 : i < (self.#layers)/WORDSIZE : i++) {
					temp = self.&layers-->i;
					if (temp > layer_a) layer_a = temp;
				}
				!! Comprueba las capas del resto de elementos vestidos por PJ:
				objectloop(obj in player && obj ofclass Clothes
					&& obj has worn && obj ~= self) {
					for (i = 0 : i < (obj.#layers)/WORDSIZE : i++) {
						temp = obj.&layers-->i;
						if (i == 0) layer_b = temp;
						else if (temp < layer_b) layer_b = temp;
					}
					if (layer_a < layer_b) {
						switch (_grammatical_inflection) {
							FIRST_PERSON_PAST:
								if (IsPluralNoun(player))
									print "Teníamos que quitarnos";
								else print "Tenías que quitarme";
							SECOND_PERSON_PAST:
								if (IsPluralNoun(player))
									print "Teníais que quitaros";
								else print "Tenías que quitarte";
							THIRD_PERSON_PAST:
								if (IsPluralNoun(player))
									print "Tenían que quitarse";
								else print "Tenía que quitarse";
							FIRST_PERSON_PRESENT:
								if (IsPluralNoun(player))
									print "Tenemos que quitarnos";
								else print "Tengo que quitarme";
							SECOND_PERSON_PRESENT:
								if (IsPluralNoun(player))
									print "Tenéis que quitaros";
								else print "Tienes que quitarte";
							THIRD_PERSON_PRESENT:
								if (IsPluralNoun(player))
									print "Tienen que quitarse";
								else print "Tiene que quitarse";
							FIRST_PERSON_FUTURE:
								if (IsPluralNoun(player))
									print "Tendremos que quitarnos";
								else print "Tendré que quitarme";
							SECOND_PERSON_FUTURE:
								if (IsPluralNoun(player))
									print "Tendréis que quitaros";
								else print "Tendrás que quitarte";
							THIRD_PERSON_FUTURE:
								if (IsPluralNoun(player))
									print "Tendrán que quitarse";
								else print "Tendrá que quitarse";
						}
						" ", (the) obj, " primero.";
					}
				}
		],
		layers 0,
 has	clothing;

!!==============================================================================
!!	+	NPC
!!------------------------------------------------------------------------------
!!	Representa un personaje no jugador. Hay algunas extensiones que definen
!!	también sus propias clases personaje (por ejemplo, 'gtalk.h' de Greg
!!	Boettcher, Krister Fundin y Mark J. Tilford, para manejar conversaciones
!!	por medio de menús, define la clase 'Character'). Se pueden utilizar estas
!!	librerías y reutilizar las clases definidas en ellas dentro de NPC
!!	convirtiendo esta última en una subclase de aquella definida en la librería
!!	externa. Por ejemplo:
!!
!!		Class NPC
!!			class Thing
!!			class Character ! (definida en la librería 'gtalk.h')
!!			[...]
!!		;
!!
!!------------------------------------------------------------------------------

Class	NPC
 class	Thing,
 with	before [
			previous_style;
			DefaultAction:
				if (self has described) {
					previous_style = UseTextStyle(TEXT_STYLE_PARSER);
					print (string) TEXT_STYLE_PARSER_PREFIX;
					print "habla con ";
					PrintToBuffer(temp_array, INPUT_BUFFER_LEN, self);
					PrintCharacterArray(temp_array);
					print (string) TEXT_STYLE_PARSER_SUFIX;
					UseTextStyle(previous_style);
					new_line;
					<<TalkTo self>>;
				}
		],
 has	animate;
